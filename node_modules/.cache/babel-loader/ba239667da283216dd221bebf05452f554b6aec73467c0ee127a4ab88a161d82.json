{"ast":null,"code":"var _jsxFileName = \"/Users/danielq/Documents/GitHub/emiride.com/emiride/src/components/home-components/EN/CategoryDetailCarComponent_EN.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport Header from \"./HeaderComponent\";\nimport Footer from \"./FooterComponent\";\nimport { useParams } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport CarCategoriesCard from '../../CarCategoriesCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CategoryDetailCarComponent() {\n  _s();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const {\n    categoria\n  } = useParams(); // Access the route parameter\n\n  useEffect(() => {\n    fetchData(categoria);\n  }, []);\n  const fetchData = async car => {\n    try {\n      const response = await fetch('https://app2.movlife.co/jsongoogle.php?categoria=' + categoria); // Replace with your API endpoint\n      if (!response.ok) {\n        throw new Error('Network response was not ok.');\n      }\n      const data = await response.json();\n      console.log(data);\n      setData(data);\n      setLoading(false);\n    } catch (error) {\n      setError(error.message);\n      setLoading(false);\n    }\n  };\n  const carCategories = data; // Get the car details based on the route parameter\n\n  if (!carCategories) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Car not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 14\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n_s(CategoryDetailCarComponent, \"iS6d3GEMts7C14T4O5PkOxs+FUw=\", false, function () {\n  return [useParams];\n});\n_c = CategoryDetailCarComponent;\nexport default CategoryDetailCarComponent;\nvar _c;\n$RefreshReg$(_c, \"CategoryDetailCarComponent\");","map":{"version":3,"names":["React","Header","Footer","useParams","Helmet","CarCategoriesCard","CategoryDetailCarComponent","data","setData","useState","loading","setLoading","error","setError","categoria","useEffect","fetchData","car","response","fetch","ok","Error","json","console","log","message","carCategories"],"sources":["/Users/danielq/Documents/GitHub/emiride.com/emiride/src/components/home-components/EN/CategoryDetailCarComponent_EN.js"],"sourcesContent":["import React from \"react\";\nimport Header from \"./HeaderComponent\";\nimport Footer from \"./FooterComponent\";\nimport { useParams } from 'react-router-dom';\n\nimport { Helmet } from 'react-helmet';\nimport CarCategoriesCard from '../../CarCategoriesCard';\n\nfunction CategoryDetailCarComponent(){\n\n\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const { categoria } = useParams(); // Access the route parameter\n  \n  \n    useEffect(() => {\n      fetchData(categoria);\n    }, []);\n  \n    const fetchData = async (car) => {\n      try {\n        const response = await fetch('https://app2.movlife.co/jsongoogle.php?categoria='+categoria); // Replace with your API endpoint\n        if (!response.ok) {\n          throw new Error('Network response was not ok.');\n        }\n        const data = await response.json();\n        console.log(data);\n        setData(data);\n        setLoading(false);\n      } catch (error) {\n        setError(error.message);\n        setLoading(false);\n      }\n    };\n  \n    const carCategories = data; // Get the car details based on the route parameter\n\n    if (!carCategories) {\n      return <p>Car not found</p>;\n    }\n  \n   \n    return(\n        <div>\n  \n        </div>\n    )\n}\n\nexport default CategoryDetailCarComponent;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,SAAS,QAAQ,kBAAkB;AAE5C,SAASC,MAAM,QAAQ,cAAc;AACrC,OAAOC,iBAAiB,MAAM,yBAAyB;AAAC;AAExD,SAASC,0BAA0B,GAAE;EAAA;EAGjC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGF,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAGJ,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM;IAAEK;EAAU,CAAC,GAAGX,SAAS,EAAE,CAAC,CAAC;;EAGnCY,SAAS,CAAC,MAAM;IACdC,SAAS,CAACF,SAAS,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,SAAS,GAAG,MAAOC,GAAG,IAAK;IAC/B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mDAAmD,GAACL,SAAS,CAAC,CAAC,CAAC;MAC7F,IAAI,CAACI,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;MACjD;MACA,MAAMd,IAAI,GAAG,MAAMW,QAAQ,CAACI,IAAI,EAAE;MAClCC,OAAO,CAACC,GAAG,CAACjB,IAAI,CAAC;MACjBC,OAAO,CAACD,IAAI,CAAC;MACbI,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,QAAQ,CAACD,KAAK,CAACa,OAAO,CAAC;MACvBd,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMe,aAAa,GAAGnB,IAAI,CAAC,CAAC;;EAE5B,IAAI,CAACmB,aAAa,EAAE;IAClB,oBAAO;MAAA,UAAG;IAAa;MAAA;MAAA;MAAA;IAAA,QAAI;EAC7B;EAGA,oBACI;IAAA;IAAA;IAAA;EAAA,QAEM;AAEd;AAAC,GAzCQpB,0BAA0B;EAAA,QAMTH,SAAS;AAAA;AAAA,KAN1BG,0BAA0B;AA2CnC,eAAeA,0BAA0B;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}