{"ast":null,"code":"var _jsxFileName = \"/Users/danielq/Documents/GitHub/emiride.com/emiride/src/components/home-components/HomeCategoryComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport CarCategoriesCard from '../CarCategoriesCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HomeCategoryComponent(category) {\n  _s();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetchData(category);\n  }, []);\n  const fetchData = async categoria => {\n    try {\n      const response = await fetch('https://test-emiride.movlife.co/jsongoogle.php?categoria=' + categoria.category); // Replace with your API endpoint\n      if (!response.ok) {\n        throw new Error('Network response was not ok.');\n      }\n      const data = await response.json();\n      console.log(categoria);\n      setData(data);\n      setLoading(false);\n    } catch (error) {\n      setError(error.message);\n      setLoading(false);\n    }\n  };\n  const carCategories = data; // Get the car details based on the route parameter\n\n  if (!carCategories) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Car not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 14\n    }, this);\n  }\n  const carCategoriesComponents = [];\n  const categoria = category;\n  let max = 0;\n  data.forEach(carDetails => {\n    max = max + 1;\n    if (max <= 3) {\n      carCategoriesComponents.push( /*#__PURE__*/_jsxDEV(CarCategoriesCard, {\n        ...carDetails\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this));\n    }\n  });\n  return carCategoriesComponents;\n}\n_s(HomeCategoryComponent, \"C4fiAW6C7RZgaKDoEXQgZpbuUZg=\");\n_c = HomeCategoryComponent;\nexport default HomeCategoryComponent;\nvar _c;\n$RefreshReg$(_c, \"HomeCategoryComponent\");","map":{"version":3,"names":["React","useEffect","useState","CarCategoriesCard","HomeCategoryComponent","category","data","setData","loading","setLoading","error","setError","fetchData","categoria","response","fetch","ok","Error","json","console","log","message","carCategories","carCategoriesComponents","max","forEach","carDetails","push"],"sources":["/Users/danielq/Documents/GitHub/emiride.com/emiride/src/components/home-components/HomeCategoryComponent.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport CarCategoriesCard from '../CarCategoriesCard';\n\nfunction HomeCategoryComponent(category){\n\n\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n   \n  \n    useEffect(() => {\n      fetchData(category);\n    }, []);\n  \n    const fetchData = async (categoria) => {\n      try {\n        const response = await fetch('https://test-emiride.movlife.co/jsongoogle.php?categoria='+categoria.category); // Replace with your API endpoint\n        if (!response.ok) {\n          throw new Error('Network response was not ok.');\n        }\n\n        const data = await response.json();\n        console.log(categoria);\n        setData(data);\n        setLoading(false);\n      } catch (error) {\n        setError(error.message);\n        setLoading(false);\n      }\n    };\n  \n    const carCategories = data; // Get the car details based on the route parameter\n\n    if (!carCategories) {\n      return <p>Car not found</p>;\n    }\n    \n    const carCategoriesComponents = [];\n    const categoria=category\n    let max=0;\n    data.forEach((carDetails) => {\n        max=max+1;\n        if(max<=3){\n          carCategoriesComponents.push(\n            <CarCategoriesCard {...carDetails} ></CarCategoriesCard>\n        );\n        }\n        \n       \n      });\n   \n    return(\n             carCategoriesComponents \n    )\n}\n\nexport default HomeCategoryComponent;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,iBAAiB,MAAM,sBAAsB;AAAC;AAErD,SAASC,qBAAqB,CAACC,QAAQ,EAAC;EAAA;EAGpC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAGxCD,SAAS,CAAC,MAAM;IACdW,SAAS,CAACP,QAAQ,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMO,SAAS,GAAG,MAAOC,SAAS,IAAK;IACrC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2DAA2D,GAACF,SAAS,CAACR,QAAQ,CAAC,CAAC,CAAC;MAC9G,IAAI,CAACS,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;MACjD;MAEA,MAAMX,IAAI,GAAG,MAAMQ,QAAQ,CAACI,IAAI,EAAE;MAClCC,OAAO,CAACC,GAAG,CAACP,SAAS,CAAC;MACtBN,OAAO,CAACD,IAAI,CAAC;MACbG,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,QAAQ,CAACD,KAAK,CAACW,OAAO,CAAC;MACvBZ,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMa,aAAa,GAAGhB,IAAI,CAAC,CAAC;;EAE5B,IAAI,CAACgB,aAAa,EAAE;IAClB,oBAAO;MAAA,UAAG;IAAa;MAAA;MAAA;MAAA;IAAA,QAAI;EAC7B;EAEA,MAAMC,uBAAuB,GAAG,EAAE;EAClC,MAAMV,SAAS,GAACR,QAAQ;EACxB,IAAImB,GAAG,GAAC,CAAC;EACTlB,IAAI,CAACmB,OAAO,CAAEC,UAAU,IAAK;IACzBF,GAAG,GAACA,GAAG,GAAC,CAAC;IACT,IAAGA,GAAG,IAAE,CAAC,EAAC;MACRD,uBAAuB,CAACI,IAAI,eAC1B,QAAC,iBAAiB;QAAA,GAAKD;MAAU;QAAA;QAAA;QAAA;MAAA,QAAuB,CAC3D;IACD;EAGF,CAAC,CAAC;EAEJ,OACSH,uBAAuB;AAEpC;AAAC,GApDQnB,qBAAqB;AAAA,KAArBA,qBAAqB;AAsD9B,eAAeA,qBAAqB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}